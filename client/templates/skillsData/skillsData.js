Template.skillsData.onCreated( function () {  let initialStart=moment().subtract(1000*3600*24*2).toDate();  let today = new Date();    this.startDate=new ReactiveVar({createdAt: {$gte: initialStart}});  this.endDate=new ReactiveVar({createdAt: {$lte: today}});  this.jsParentCategory=new ReactiveVar({});  this.jsSubSpecialization=new ReactiveVar({});  this.jsListedIndustry=new ReactiveVar({});  // this.jsListedSpec=new ReactiveVar({});  this.jsListedRole=new ReactiveVar({});  this.jsAltIndustry=new ReactiveVar({});  this.jsExperience=new ReactiveVar({});  // let passedQ = {   //   $and : [  //         startDate.get(),  //         endDate.get(),  //         jsParentCategory.get(),  //         jsSubSpecialization.get(),  //         jsListedIndustry.get(),  //         // jsListedSpec.get(),  //         jsListedRole.get(),  //         jsAltIndustry.get(),  //         jsExperience.get()  //       ]   // };  this.autorun(() => {    var pq = {      $and : [        this.startDate.get(),        this.endDate.get(),        this.jsParentCategory.get(),        this.jsSubSpecialization.get(),        this.jsListedIndustry.get(),        // this.jsListedSpec.get(),        this.jsListedRole.get(),        this.jsAltIndustry.get(),        this.jsExperience.get()      ]          };        if ( pq ){      var subscription = this.subscribe('skillsKeywordInstancesQuery', pq);          var meta = this.subscribe('JobStreetMeta');      if (subscription.ready() && meta.ready()) {        // this.loaded.set(limit);        console.log("> Subscription is ready. \n\n");      } else {        console.log("> Subscription is not ready yet. \n\n");      }    }      });  this.items = function() {     return SkillsKeywordInstances.find({},{ sort: { keywordMatch: 1 }});  };  });Template.skillsData.helpers({  tableItems() {    let data = Template.instance().items();    let skillNames = _.uniq(data.map((doc) => {return doc.keywordMatch}),true);    let mapped = data.map( ( item, index, cursor ) => {        return {          match: item.keywordMatch,          total: 1        };    });    function sumFilter(items, prop, valueMatching, whereProp){      var filtered = items.filter(function(el,indx,array){        return el[whereProp] == valueMatching;      });            return filtered.reduce( function(a, b){        return a + b[prop];      }, 0);    };    let result = [];    skillNames.forEach(function(element, index, array) {      let rObj = {};      rObj.keywordMatch = element;      rObj.total = sumFilter(mapped, 'total', element, 'match');      result.push(rObj);    });    let sortedData = result.sort(function(a, b) {      return b.total-a.total;    });    if (sortedData) {      return sortedData;    } else {      return [];    }  }});Template.skillsData.events({  'change #skillsDataForm': function (event, instance) {    GlobalUI.toast( 'Updating table....');    var form = AutoForm.getFormValues('skillsDataForm'),    doc = form.insertDoc;    if (doc.startDate){      instance.startDate.set({createdAt: {$gte: doc.startDate }});    } else {      instance.startDate.set({createdAt: {$gte: moment().subtract(1000*3600*24*2).toDate()}});    }    if (doc.endDate){      instance.endDate.set({createdAt: {$lte: doc.endDate}});    } else {      instance.endDate.set({createdAt: {$lte: new Date()}});    }    if (doc.jsParentCategory){      instance.jsParentCategory.set({parentCategory: {$in: doc.jsParentCategory}});    } else {      instance.jsParentCategory.set({});    }    if (doc.jsSubSpecialization){      instance.jsSubSpecialization.set({subSpecialization: {$in: doc.jsSubSpecialization}});    } else {      instance.jsSubSpecialization.set({});    }         if (doc.jsListedIndustry){      instance.jsListedIndustry.set({listedIndustry: {$in: doc.jsListedIndustry}});    } else {      instance.jsListedIndustry.set({});    }         if (doc.jsListedRole){      instance.jsListedRole.set({listedRole: {$in: doc.jsListedRole}});    } else {      instance.jsListedRole.set({});    }         if (doc.jsAltIndustry){      instance.jsAltIndustry.set({companySnapIndustry: {$in: doc.jsAltIndustry}});    }  else {      instance.jsAltIndustry.set({});    }        if (doc.jsExperience){      instance.jsExperience.set({experience: {$in: doc.jsExperience}});    } else {      instance.jsExperience.set({});    }     // Tracker.flush();  }});