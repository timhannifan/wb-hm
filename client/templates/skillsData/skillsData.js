Template.skillsData.onCreated( () => {  let initialStart=moment().subtract(1000*3600*24*14).toDate();  let today = new Date();    this.startDate=new ReactiveVar({createdAt: {$gte: initialStart}});  this.endDate=new ReactiveVar({createdAt: {$lte: today}});  this.jsParentCategory=new ReactiveVar({});  this.jsSubSpecialization=new ReactiveVar({});  this.jsListedIndustry=new ReactiveVar({});  this.jsListedSpec=new ReactiveVar({});  this.jsListedRole=new ReactiveVar({});  this.jsAltIndustry=new ReactiveVar({});  this.jsExperience=new ReactiveVar({});  let passedQ = {     $and : [          startDate.get(),          endDate.get(),          jsParentCategory.get(),          jsSubSpecialization.get(),          jsListedIndustry.get(),          jsListedSpec.get(),          jsListedRole.get(),          jsAltIndustry.get(),          jsExperience.get()        ]   };  console.log(passedQ);  Tracker.autorun(function () {    Meteor.subscribe('JobStreetMeta');    Meteor.subscribe('skillsKeywordInstancesQuery', passedQ);  });});Template.skillsData.helpers({  tableItems() {    let data = SkillsKeywordInstances.find(      { $and : [          startDate.get(),          endDate.get(),          jsParentCategory.get(),          jsSubSpecialization.get(),          jsListedIndustry.get(),          jsListedSpec.get(),          jsListedRole.get(),          jsAltIndustry.get(),          jsExperience.get()        ]       });    let skillNames = _.uniq(data.map((doc) => {return doc.keywordMatch}),true);    let mapped = data.map( ( item, index, cursor ) => {        return {          match: item.keywordMatch,          total: 1        };    });    function sumFilter(items, prop, valueMatching, whereProp){      var filtered = items.filter(function(el,indx,array){        return el[whereProp] == valueMatching;      });            return filtered.reduce( function(a, b){        return a + b[prop];      }, 0);    };    let result = [];    skillNames.forEach(function(element, index, array) {      let rObj = {};      rObj.keywordMatch = element;      rObj.total = sumFilter(mapped, 'total', element, 'match');      result.push(rObj);    });    let sortedData = result.sort(function(a, b) {      return b.total-a.total;    });    if (sortedData) {      return sortedData;    } else {      return [];    }  }});Template.skillsData.events({  'change #skillsDataForm': function (event, template) {    GlobalUI.toast( 'Updating table....');    var form = AutoForm.getFormValues('skillsDataForm'),    doc = form.insertDoc;    if (doc.startDate){      startDate.set({createdAt: {$gte: moment().subtract(1000*3600*24*14).toDate()}});    }else {      startDate.set({createdAt: {$gte: new Date()}});    }         if (doc.endDate){      endDate.set({createdAt: {$lte: doc.endDate}});    }else {      endDate.set({createdAt: {$lte: new Date()}});    }        if (doc.jsParentCategory){      jsParentCategory.set({parentCategory: {$in: doc.jsParentCategory}});    } else {      jsParentCategory.set({});    }        if (doc.jsSubSpecialization){      jsSubSpecialization.set({subSpecialization: {$in: doc.jsSubSpecialization}});    } else {      jsSubSpecialization.set({});    }         if (doc.jsListedIndustry){      jsListedIndustry.set({listedIndustry: {$in: doc.jsListedIndustry}});    } else {      jsListedIndustry.set({});    }         if (doc.jsListedSpec){      jsListedSpec.set({listedSpec: {$in: doc.jsListedSpec}});    } else {      jsListedSpec.set({});    }         if (doc.jsListedRole){      jsListedRole.set({listedRole: {$in: doc.jsListedRole}});    } else {      jsListedRole.set({});    }         if (doc.jsAltIndustry){      jsAltIndustry.set({companySnapIndustry: {$in: doc.jsAltIndustry}});    }  else {      jsAltIndustry.set({});    }        if (doc.jsExperience){      jsExperience.set({experience: {$in: doc.jsExperience}});    } else {      jsExperience.set({});    }   }});