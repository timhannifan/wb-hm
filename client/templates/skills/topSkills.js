Template.topSkills.onCreated( () => {  var instance = Template.instance();  instance.skillType = new ReactiveDict();  instance.skillType.set('type', 'all');  instance.getSkillFilter = () => instance.skillType.get('type');  instance.parentCategory = new ReactiveVar( null );  instance.subSpecialization  = new ReactiveVar( 'all' );  instance.listedSpecialization  = new ReactiveVar( 'all' );  instance.listedRole  = new ReactiveVar( 'all' );  instance.listedIndustry  = new ReactiveVar( 'all' );  instance.experience  = new ReactiveVar( 'all' );  instance.filters = {};    instance.ready = new ReactiveVar();  Tracker.autorun(() => {    var subHandle1 = Meteor.subscribe('JSAggs.filters',instance.filters);    var subHandle2 = Meteor.subscribe('JobStreetMeta');    var isReady = subHandle1.ready() && subHandle2.ready();    console.log(`skillsSummary subs are ${isReady ? 'ready' : 'not ready'}`);      instance.ready.set(isReady);  });});Template.topSkills.onRendered( () => {  var instance = Template.instance();});Template.topSkills.helpers({  parentCategories: function() {      let data = JobStreetMeta.find( {type: 'parentCategory'}, { fields: { name: 1}, sort: {name: 1}});      if ( data ) {        return _.uniq( data.map( ( item ) => {          return item.name;        }), true );      }  },  subSpecializations: function() {      let data = JobStreetMeta.find( {type: 'subSpecialization'}, { fields: { name: 1}, sort: {name: 1}});      if ( data ) {        return _.uniq( data.map( ( item ) => {          return item.name;        }), true );      }  },  companySnapIndustries: function() {      let data = JobStreetMeta.find( {type: 'companySnapIndustry'}, { fields: { name: 1}, sort: {name: 1}});      if ( data ) {        return _.uniq( data.map( ( item ) => {          return item.name;        }), true );      }  },       listedIndustries: function() {      let data = JobStreetMeta.find( {type: 'listedIndustry'}, { fields: { name: 1}, sort: {name: 1}});      if ( data ) {        return _.uniq( data.map( ( item ) => {          return item.name;        }), true );      }  },   listedSpecializations: function() {      let data = JobStreetMeta.find( {type: 'listedSpec'}, { fields: { name: 1}, sort: {name: 1}});      if ( data ) {        return _.uniq( data.map( ( item ) => {          return item.name;        }), true );      }  },      listedRoles: function() {      let data = JobStreetMeta.find( {type: 'listedRole'}, { fields: { name: 1}, sort: {name: 1}});      if ( data ) {        return _.uniq( data.map( ( item ) => {          return item.name;        }), true );      }  },  experiences: function() {      let data = JobStreetMeta.find( {type: 'experience'}, { fields: { name: 1}, sort: {name: 1}});      if ( data ) {        return _.uniq( data.map( ( item ) => {          return item.name;        }), true );      }  },  child() {      let pc = Template.instance().parentCategory.get();      let query  = pc ? { parent: pc } : { type: 'subSpecialization'},      children = JobStreetMeta.find( query, { fields: { name: 1 } } );      console.log(query);      console.log(children.map( ( item ) => {        return item.name;      }));      return children.map( ( item ) => {        return item.name;      });  },  currentIndustry() {    let name = Template.instance().parentCategory.get();    console.log('industryname' + name);    return name === 'all' ? '' : name;  },  tableItems() {    let data = JSAggs.find({},{sort: {skillKeyword: 1}});    var skillNames = _.uniq(data.map((doc) => {return doc.skillKeyword}),true);    console.log(skillNames);    var mapped = data.map( ( item, index, cursor ) => {        return {          // index: index,          skillKeyword: item.skillKeyword,          total: +`${ item.total }`        };    });    function logArrayElements(element, index, array) {      console.log('a[' + index + '] = ' + element);    };    function sumFilter(items, prop, valueMatching, whereProp){      var filtered = items.filter(function(el,indx,array){        return el[whereProp] == valueMatching;      });            return filtered.reduce( function(a, b){        return a + b[prop];      }, 0);    };    var result = [];    skillNames.forEach(function(element, index, array) {      var rObj = {};      rObj.skillKeyword = element;      rObj.total = sumFilter(mapped, 'total', element, 'skillKeyword');      result.push(rObj);      // console.log(rObj);    });    return result.sort(function(a, b) {      return b.total-a.total;    });  } });Template.topSkills.events({  'change [name="industry"]': function(event, instance) {      // let industry = ;      // console.log('industry handler' + industry);      let parentCategorySelection = event.target.value;      instance.parentCategory.set( parentCategorySelection );      if (instance.find( '[name="specialization"]' ).value != 'all') {          console.log('found a specialization loop on industry change');          let specialization   = instance.find( '[name="specialization"]' ),              isMatch = JobStreetMeta.findOne( { name: specialization.value, parent: parentCategorySelection } );              consoel.log(isMatch);              if ( !isMatch ) {                specialization.querySelector( 'option[value="all"]' ).setAttribute( 'selected', true );                instance.parentCategory.set( 'all' );              }      }      Tracker.flush();  },  'change [name="specialization"]': function(event, instance) {      instance.subSpecialization.set( event.target.value );  }});